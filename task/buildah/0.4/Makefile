SHELL := /bin/bash
YAML_FILE := buildah.yaml
YAML_TEMPLATE := buildah.template.yaml
SCRIPTS_DIR := steps

# Find all shell scripts in the scripts directory
SCRIPTS := $(wildcard $(SCRIPTS_DIR)/*.sh)

.PHONY: shellcheck taskyaml clean extract help

# Default target
all: taskyaml

# Run shellcheck on all scripts
shellcheck:
	@echo "Running shellcheck on all scripts..."
	@shellcheck steps/*.sh || (echo "Shellcheck failed. Fix issues before running taskyaml." && exit 1)
	@echo "All scripts pass shellcheck!"

# Embed scripts into YAML
embed-scripts:
	@echo "Embedding scripts into YAML..."
	@./util/embed_scripts_simple2.sh

# Add warning comment to generated YAML
add-warning:
	@echo "Adding warning comment to generated YAML..."
	@if [ -f $(YAML_FILE) ]; then \
		if grep -q "WARNING: DO NOT EDIT THIS FILE DIRECTLY" $(YAML_FILE); then \
			echo "Warning comment already exists in $(YAML_FILE)"; \
		else \
			head -n 1 $(YAML_FILE) > $(YAML_FILE).tmp; \
			echo "# WARNING: DO NOT EDIT THIS FILE DIRECTLY!" >> $(YAML_FILE).tmp; \
			echo "#" >> $(YAML_FILE).tmp; \
			echo "# This file is automatically generated from buildah.yaml.in and scripts in the steps/ directory." >> $(YAML_FILE).tmp; \
			echo "# To modify this task:" >> $(YAML_FILE).tmp; \
			echo "# 1. Edit the scripts in the steps/ directory" >> $(YAML_FILE).tmp; \
			echo "# 2. Run 'make taskyaml' to regenerate this file" >> $(YAML_FILE).tmp; \
			echo "# 3. See SCRIPT_MANAGEMENT.md for detailed instructions" >> $(YAML_FILE).tmp; \
			echo "#" >> $(YAML_FILE).tmp; \
			tail -n +2 $(YAML_FILE) >> $(YAML_FILE).tmp; \
			mv $(YAML_FILE).tmp $(YAML_FILE); \
			echo "Warning comment added to $(YAML_FILE)"; \
		fi; \
	else \
		echo "Error: $(YAML_FILE) not found. Run 'make embed-scripts' first."; \
		exit 1; \
	fi

# Extract parameter defaults as JSON
extract-param-defaults:
	@echo "Extracting parameter defaults from task template..."
	@yq eval -o=json '.spec.params[] | select(has("default")) | {"name": .name, "default": .default}' $(YAML_TEMPLATE) | \
	jq -s 'reduce .[] as $$item ({}; . + {($$item.name): $$item.default})' > param-defaults.json
	@cp param-defaults.json $(SCRIPTS_DIR)/param-defaults.json
	@echo "Parameter defaults extracted to param-defaults.json and copied to $(SCRIPTS_DIR)/"

# Generate trusted artifacts tasks
generate-ta-tasks:
	@echo "Generating trusted artifacts tasks..."
	@cd ../../.. && ./hack/generate-ta-tasks.sh

# Generate buildah remote tasks
generate-buildah-remote:
	@echo "Generating buildah remote tasks..."
	@cd ../../.. && ./hack/generate-buildah-remote.sh

# Generate all tasks (including ta-tasks and buildah-remote)
generate-all: extract-param-defaults generate-ta-tasks generate-buildah-remote
	@echo "All generation steps completed!"
	@echo "Running yamllint..."
	@yamllint buildah.yaml || (echo "Yamllint warnings found, but YAML is valid (kubectl validation passed)" && echo "Continuing with build...")
	@echo "Task YAML is ready!"

# Clean up generated files
clean:
	rm -f buildah.yaml.tmp
	rm -f build.py build.sh buildah.yaml-e buildah.yaml.backup
	rm -f *.backup *.tmp *.bak *~ *.yaml-e
	rm -f *.py
	rm -f param-defaults.json
	rm -f steps/param-defaults.json
	rm -rf .venv/

# Extract scripts from YAML (for development)
extract:
	@echo "Extracting scripts from YAML..."
	@./util/extract_scripts.sh

# Show help
help:
	@echo "Available targets:"
	@echo "  shellcheck  - Run shellcheck on all scripts"
	@echo "  embed-scripts - Embed scripts into YAML"
	@echo "  add-warning - Add warning comment to generated YAML"
	@echo "  extract-param-defaults - Extract parameter defaults as JSON"
	@echo "  generate-ta-tasks - Generate trusted artifacts tasks"
	@echo "  generate-buildah-remote - Generate buildah remote tasks"
	@echo "  taskyaml    - Run shellcheck, embed scripts, add warning, run yamllint"
	@echo "  generate-all - Run all generation steps (including ta-tasks and buildah-remote)"
	@echo "  clean       - Clean up generated files"
	@echo "  extract     - Extract scripts from YAML"
	@echo "  help        - Show this help"

# Embed scripts into YAML and run yamllint
taskyaml: shellcheck embed-scripts add-warning generate-all
